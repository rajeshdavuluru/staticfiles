1) How to make an object serializable?
	implments Serializable interface
2) How many ways to do autowire?
	1) Autowire by properties
		@Autowired
		private FooFormatter fooFormatter;
	2) Autowire by setter method
		@Autowired
		public void setFooFormatter(FooFormatter fooFormatter) {
			this.fooFormatter = fooFormatter;
		}
	3) Autowire by constructor
		@Autowired
		public FooService(FooFormatter fooFormatter) {
			this.fooFormatter = fooFormatter;
		}
		
3) Autowire Disambiguation 
		Car is an interface , this has 2 implementation classes SVU and Sedan.
		if we use like below, which object will be initialized.
		@Autowired
		private Car car;
		
	way1: 
		@Autowired
		@Qualifier("SUV")
		private Car car;
	way2: autowire by name, in this case Sedan object will be initialized
		@Autowired
		private Formatter sedan;
		
4) How HashMap works
5) Dependency Injection and Inversion of Control
	
6) Checked Exception vs Unchecked Exception
	Checked Exception: at compile time, IOException, FileNotFoundException
	Unchecked Exception: at run time, NullPointerException, ArithmeticException (Devide by zero)
	
7) Overriding Vs Overloading
	Overriding: Parent Class and Child Class
	Overloading: Same Class

8) FunctionalInterface (Java 1.8)
9) NullPointerException(NPE) Optional package (Java 1.8)
10) Streams (Java 1.8)
11) Tread Pool Executor
12) How create thread and write a program for creating 3 threads
	Actually Thread.start() creates a new thread and have its own execution scenario.

	Thread.start() calls the run() method asynchronously,which changes the state of new Thread to Runnable.

	But Thread.run() does not create any new thread. Instead it execute the run method in the current running thread synchronously.

	If you are using Thread.run() then you are not using the features of multi threading at all.
	
	join() -- method for synchronization
	notify()  -- wait()
	suspend() -- resume()
	

13) Difference between WAR & Ear?

14) what is the cost of t2 micro?
15) you created a eC2 instance and configured in SSH client but you are not able to access it why?
16) if you run an instance for 5 mins and stopped and again started same instance, how much billing ? will it take all one hour ?
17) how Auto scaling works?
18) if threshold reached to maximum, ECS will create new instance. after the threshold drops what will happen to those instance? 
	which instance will be dropped?
19) what is the GC in java?
20) what is the difference between String, StringBuffer and StringBuilder?
	String is immutable, object stored in Constant String pool
	StringBuffer, is synchronised and little slow. objects stored in stack
	stringBuilder, everything is same except Asynchronised
	
21) what is cloud front?
22) what is the cloudformation? what is the exetension of cloudformation?
23) what are the components you used in AWS?
24) How to create a ECS?
25) Controller vs RestController
26) what is the HTTP Status Code for Delete?
27) POST VS PUT
28) Thread Sleep vs Wait
	Sleep -> wont relase the lock, same thread
	Wait --> will relase the lock, between threads, 
29) List of strings, sort the strings with their length
30) How are we  creating Beans ?
31) Beans vs component annontation?
32) You have thread T1, T2, and T3, how will you ensure that thread T2 run after T1 and thread T3 run after T2?
	using join() method in thread
33) Which two methods you need to implement to use an Object as key in HashMap?
	equals and Hashcode

34) Comparable vs Comparator
	a) Comparable interface can be used to provide single way of sorting 
		whereas Comparator interface is used to provide different ways of sorting.
	b) For using Comparable, Class needs to implement it whereas for using Comparator we don’t need 
		to make any change in the class.
	c) Comparable interface is in java.lang package whereas Comparator interface is present in java.util package.
	d) We don’t need to make any code changes at client side for using Comparable, Arrays.sort() or Collection.sort() 
		methods automatically uses the compareTo() method of the class. For Comparator, 
		client needs to provide the Comparator class to use in compare() method.
35) >>, <<, >>>, <<<
36) Transient vs Volatile
37) HashCode or Hashing algo
38) Collection vs Collections
	Collection:- Interface for most collection classes(List, Map, etc..)
	Collections : - Utility class for collection framework
39) Iterator vs Enumarator
	
	
1) Implement Linked list
2) Arrays vs Collection
3) Set, vector
4)
	
	https://javarevisited.blogspot.com/2018/07/java-multi-threading-interview-questions-answers-from-investment-banks.html
	
	

1) Hashmap Implementation
2) explain each key word in public static void main
3) Access Specifiers

	Private: The access level of a private modifier is only within the class. It cannot be accessed from outside the class.
	Default: The access level of a default modifier is only within the package. It cannot be accessed from outside the package. If 			you do not specify any access level, it will be the default.
	Protected: The access level of a protected modifier is within the package and outside the package through child class. If you do 		not make the child class, it cannot be accessed from outside the package.
	Public: The access level of a public modifier is everywhere. It can be accessed from within the class, outside the class, within 		the package and outside the package.

4) While iterator opened on ArrayList, if we modify the list what will happen?
5) Types of Exceptions and Checked and Unchecked exceptions
6) JPA vs Hibernate
7) Session vs SessionFactory
8) if i have 2 data bases, how many Session factories required?
9) Which one is Synchronized and which one not synchronized in session and Session factory?
10) what is serialization
11) Primitive data types
12) how to create Immutable objects
13) Scenario:  i want to delete the duplicate objects from DB and show those duplicate records in the UI. Explain this scenario from UI to Backend? and which layer you will do the duplicates logic?
14) What is JDBC
15) How to create service class
16) HTTP methods
17) Can we have two request have same name?
18) Explain static keyword
19) Autoboxing and unboxing
   Autoboxing: Converting the primitive data type to its corresponding wrapper class
   unboxing: converting wrapper class to primitive data type

1) Explain Your Project technically as much as possible
2) How do you update the Large set of data 
3)  Have you ever involved in DB design, What is EVI?
4) Did you Work on Hibernate? Is hibernate is good for large set of data?
5) Do you ever work in Microservices? what is the difference between Microservices and REST?
6) Have you ever worked on Spring JPA?
7) How service discovery will work?
8) Which cloud environment you are working on?
9) Which version of oracle you are using? 

1) Tell me about your self
1) What is Spring Config package?
2) What is shutdown Hook
3) JPA vs Hibernate?
4) Spring Boot initializers?
5) How to change the default configuration
6) Spring boot Acuators 
7) Context Switching
8) Do we need container to run the spring boot app 
9) IOC vs DI
10) Spring components

1) Tell me about your project
2) What are the Advantages of using Spring Boot
3) Can you explain how to write a REST API in Spring Boot
4) Can you explain the HTTP Status codes 

1) Array Vs ArrayList and their time complexities
2) How Hashmap implemented and time complexities

1) ArrayList vs linked list
2) Parking lot  issue, 
3) we have a service which is add the number of occurrences of the number, second service which will get the number
	Add Service: 10
	Add Service 20
	Add Service 10
	
	Get Service: 10 result will be 2
4) Hashmap vs ConcurrentHashmap
5)  service 1  - get the data from UI
      service 2 - get the data from DB
	  service 3 - call the router and update the configuration
	  but user is complaining Router is not updating 
	  How do you solve the issue?
6) we have service which is Heap memory filling fast, 
    Server Heap Memory and GC
7) Synchronized Block vs Synchronized Method

	
	
	
	
	http://www.algolist.net/Data_structures/Binary_search_tree
	
	Binary Tree vs Binary search tree


Angular 

1) Types of routes/components loading(Lazy/Eager)   : Eager, Lazy and Preloading
2) share the data between paren to child components or viceversa
3) How to restrict the routes based on roles
4) how to create the routes in Angular
5) Life cycle methods in 
6) if any changes happend to the varialbe ..how can you update the model
7) are you using RxJS? how are you calling services in Angular?
8)   EventEmitters
9) JIT vs AOT
10) Have ever created interceptor in Angular?
11) interceptor vs interface



 Design Patterns
=========================
Gang of Four Design Patterns

1) Creational Design Patterns

a) Factory Design Pattern:  Without exposing the internal object creation, we can create the objects.

	WorkflowTransformationService.java is an interface
	BonitaWorkflowTransformationService.java : is concrete class for Bonita workflow
	PAMWorkflowTransformationService.java: is concrete class for PAM workflow
	
	WorkflowTransformationServiceFactory.java  : it is factory class, in this the method we have getWorkflowTransformationService(String type) method.
		Based on the type , we are creating the WorkflowTransformationService object.

	
b) Singleton: only one object will be created for JVM

We have a simulation functionality that means we wont call the actual service and will send some dummy data back to service.
We have some Dao implementation classes with Singleton approach.
We are creating the instance at the class level

2) Structural Design Patterns

a) Facade Design Patterns:  The facade pattern is appropriate when we have a complex system that we want to expose to clients in a simplified way. 
	Its purpose is to hide internal complexity behind a single interface that appears simple from the outside.
	
	 MigrationFacade.java : Interface for CPM(This interface has abstract methods for Validation, Migration and Backout)
	 MigrationFacadeImpl.java: is concrete class for Facade class.
	 
	 
3) Behavior Design Patterns

a) Chain of responsibilities
b) Observer
